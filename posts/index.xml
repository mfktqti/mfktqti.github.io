<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - LoveIt</title>
        <link>https://example.com/posts/</link>
        <description>All Posts | LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 28 Apr 2024 17:02:24 &#43;0800</lastBuildDate><atom:link href="https://example.com/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Theme Documentation - Basics</title>
    <link>https://example.com/theme-documentation-basics/</link>
    <pubDate>Fri, 06 Mar 2020 21:29:01 &#43;0800</pubDate>
    <author>Dillon</author>
    <guid>https://example.com/theme-documentation-basics/</guid>
    <description><![CDATA[<p>Discover what the Hugo - <strong>LoveIt</strong> theme is all about and the core-concepts behind it.</p>]]></description>
</item>
<item>
    <title>Theme Documentation - Built-in Shortcodes</title>
    <link>https://example.com/theme-documentation-built-in-shortcodes/</link>
    <pubDate>Wed, 04 Mar 2020 16:29:41 &#43;0800</pubDate>
    <author>Dillon</author>
    <guid>https://example.com/theme-documentation-built-in-shortcodes/</guid>
    <description><![CDATA[<p><strong>Hugo</strong> provides multiple built-in shortcodes for author convenience and to keep your markdown content clean.</p>]]></description>
</item>
<item>
    <title>Basic Markdown Syntax</title>
    <link>https://example.com/basic-markdown-syntax/</link>
    <pubDate>Sun, 01 Dec 2019 21:57:40 &#43;0800</pubDate>
    <author>Dillon</author>
    <guid>https://example.com/basic-markdown-syntax/</guid>
    <description><![CDATA[<p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files.</p>]]></description>
</item>
<item>
    <title>Emoji Support</title>
    <link>https://example.com/emoji-support/</link>
    <pubDate>Tue, 01 Oct 2019 17:55:28 &#43;0800</pubDate>
    <author>Dillon</author>
    <guid>https://example.com/emoji-support/</guid>
    <description><![CDATA[<p>Emoji can be enabled in a Hugo project in a number of ways.</p>]]></description>
</item>
<item>
    <title>Theme Documentation - bilibili Shortcode</title>
    <link>https://example.com/theme-documentation-bilibili-shortcode/</link>
    <pubDate>Tue, 03 Mar 2020 11:29:41 &#43;0800</pubDate>
    <author>Dillon</author>
    <guid>https://example.com/theme-documentation-bilibili-shortcode/</guid>
    <description><![CDATA[<a href="https://github.com/dillonzq/LoveIt/releases/tag/v0.2.0" rel="noopener noreffer" target="_blank"></a>
<p>The <code>bilibili</code> shortcode embeds a responsive video player for bilibili videos.</p>]]></description>
</item>
<item>
    <title>深入探讨Go语言协程调度：GRM模型解析与优化策略</title>
    <link>https://example.com/go-gmp/</link>
    <pubDate>Sun, 28 Apr 2024 17:02:24 &#43;0800</pubDate>
    <author>xxxx</author>
    <guid>https://example.com/go-gmp/</guid>
    <description><![CDATA[调度器 GMP 模型 G：goroutine（协程）
M：thread（内核线程，不是用户态线程）
P：processer（调度器）
GM 模型 G（协程）通常在代码里用 go 关键字执行一个方法，那么就等于起了一个 G
M（内核线程）操作系统内核其实看不见 G 和 P，只知道自己在执行一个线程
G 和 P 都是在用户层上的实现
并发量小的时候还好，当并发量大了，这把大锁，就成了性能瓶颈
GMP 由来 基于没有什么是加一个中间层不能解决的思路，golang在原有的GM的基础上加入了一个调度器P 可以简单理解为是在G和M中间加了个中间层 于是就有了现在的GMP模型里的P GMP 模型 ]]></description>
</item>
<item>
    <title>我的第一遍文章</title>
    <link>https://example.com/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E9%81%8D%E6%96%87%E7%AB%A0/</link>
    <pubDate>Tue, 09 Apr 2024 23:03:45 &#43;0800</pubDate>
    <author>xxxx</author>
    <guid>https://example.com/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E9%81%8D%E6%96%87%E7%AB%A0/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title>我的文章</title>
    <link>https://example.com/%E6%88%91%E7%9A%84%E6%96%87%E7%AB%A0/</link>
    <pubDate>Tue, 09 Apr 2024 22:11:03 &#43;0800</pubDate>
    <author>xxxx</author>
    <guid>https://example.com/%E6%88%91%E7%9A%84%E6%96%87%E7%AB%A0/</guid>
    <description><![CDATA[]]></description>
</item>
</channel>
</rss>
